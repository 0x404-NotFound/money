import type {
  Person,
  SocietyState,
  Location,
  ActionResult,
  SocialEvent,
  AIDecisionContext,
  Effect,
} from "./types.js";
import { PersonGenerator } from "./person-generator.js";
import { AIDecisionMaker } from "./ai-decision-maker.js";

export class SocietySimulator {
  private state: SocietyState;
  private personGenerator: PersonGenerator;
  private aiDecisionMaker: AIDecisionMaker;
  private availableActions: string[];
  private isRunning: boolean = false;

  constructor() {
    this.personGenerator = new PersonGenerator();
    this.aiDecisionMaker = new AIDecisionMaker();
    this.availableActions = [
      "L√†m vi·ªác",
      "Ngh·ªâ ng∆°i",
      "ƒÇn u·ªëng",
      "Giao ti·∫øp v·ªõi ng∆∞·ªùi kh√°c",
      "H·ªçc t·∫≠p",
      "T·∫≠p th·ªÉ d·ª•c",
      "ƒêi mua s·∫Øm",
      "Ch∆°i game",
      "ƒê·ªçc s√°ch",
      "N·∫•u ƒÉn",
      "D·ªçn d·∫πp nh√† c·ª≠a",
      "ƒêi d·∫°o",
      "ThƒÉm b·∫°n b√®",
      "H·∫πn h√≤",
      "Tham gia s·ª± ki·ªán c·ªông ƒë·ªìng",
      "Kh·ªüi nghi·ªáp",
      "ƒê·∫ßu t∆∞",
      "Gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c",
      "S√°ng t·∫°o ngh·ªá thu·∫≠t",
      "Du l·ªãch",
    ];

    this.state = this.initializeSociety();
  }

  private initializeSociety(): SocietyState {
    // T·∫°o c√°c ƒë·ªãa ƒëi·ªÉm
    const locations: Location[] = [
      { x: 0, y: 0, name: "Trung t√¢m th√†nh ph·ªë", type: "public" },
      { x: 1, y: 0, name: "Khu d√¢n c∆∞ A", type: "home" },
      { x: -1, y: 0, name: "Khu d√¢n c∆∞ B", type: "home" },
      { x: 0, y: 1, name: "Khu c√¥ng nghi·ªáp", type: "work" },
      { x: 0, y: -1, name: "Ch·ª£ trung t√¢m", type: "commercial" },
      { x: 2, y: 0, name: "Tr∆∞·ªùng h·ªçc", type: "public" },
      { x: -2, y: 0, name: "B·ªánh vi·ªán", type: "public" },
      { x: 1, y: 1, name: "C√¥ng vi√™n", type: "public" },
      { x: -1, y: -1, name: "Qu√°n c√† ph√™", type: "commercial" },
      { x: 2, y: 1, name: "Nh√† th·ªù", type: "public" },
    ];

    // T·∫°o d√¢n s·ªë ban ƒë·∫ßu
    const people = this.personGenerator.generateMultiplePeople(20, locations);

    return {
      people,
      locations,
      events: [],
      time: {
        day: 1,
        hour: 8,
        season: "spring",
      },
      economy: {
        averageWealth: this.calculateAverageWealth(people),
        unemployment: this.calculateUnemployment(people),
        inflation: 2.5,
      },
    };
  }

  async startSimulation(): Promise<void> {
    this.isRunning = true;
    console.log("üåç B·∫Øt ƒë·∫ßu m√¥ ph·ªèng x√£ h·ªôi...");
    this.printSocietyStats();

    while (this.isRunning) {
      await this.simulateTimeStep();
      await this.sleep(2000); // Delay 2 gi√¢y gi·ªØa c√°c b∆∞·ªõc
    }
  }

  stopSimulation(): void {
    this.isRunning = false;
    console.log("‚èπÔ∏è D·ª´ng m√¥ ph·ªèng x√£ h·ªôi.");
  }

  private async simulateTimeStep(): Promise<void> {
    console.log(
      `\n‚è∞ Ng√†y ${this.state.time.day}, gi·ªù ${this.state.time.hour}:00 - M√πa ${this.state.time.season}`
    );

    // M·ªói ng∆∞·ªùi th·ª±c hi·ªán m·ªôt h√†nh ƒë·ªông
    const actions = await Promise.all(
      this.state.people.map((person) => this.simulatePersonAction(person))
    );

    // X·ª≠ l√Ω k·∫øt qu·∫£ c√°c h√†nh ƒë·ªông
    for (const actionResult of actions) {
      if (actionResult) {
        this.applyActionEffects(actionResult);
      }
    }

    // T·∫°o s·ª± ki·ªán x√£ h·ªôi ng·∫´u nhi√™n
    if (Math.random() < 0.3) {
      // 30% chance m·ªói time step
      await this.generateSocialEvent();
    }

    // C·∫≠p nh·∫≠t th·ªùi gian
    this.advanceTime();

    // C·∫≠p nh·∫≠t kinh t·∫ø
    this.updateEconomy();

    // In th·ªëng k√™ m·ªói v√†i time step
    if (this.state.time.hour % 4 === 0) {
      this.printSocietyStats();
    }
  }

  private async simulatePersonAction(
    person: Person
  ): Promise<ActionResult | null> {
    try {
      // T·∫°o context cho AI
      const context: AIDecisionContext = {
        person,
        availableActions: this.getAvailableActionsForPerson(person),
        nearbyPeople: this.getNearbyPeople(person),
        currentLocation: person.location,
        societyState: this.state,
        recentEvents: this.state.events.slice(-5),
      };

      // AI quy·∫øt ƒë·ªãnh h√†nh ƒë·ªông
      const chosenAction = await this.aiDecisionMaker.makeDecision(context);

      // AI ƒë√°nh gi√° k·∫øt qu·∫£
      const actionResult = await this.aiDecisionMaker.evaluateActionResult(
        person,
        chosenAction,
        context
      );

      console.log(
        `üë§ ${person.name}: ${chosenAction} - ${actionResult.description}`
      );

      return actionResult;
    } catch (error) {
      console.error(`L·ªói khi m√¥ ph·ªèng h√†nh ƒë·ªông c·ªßa ${person.name}:`, error);
      return null;
    }
  }

  private getAvailableActionsForPerson(person: Person): string[] {
    const actions = [...this.availableActions];

    // Th√™m h√†nh ƒë·ªông d·ª±a tr√™n tu·ªïi
    if (person.age < 18) {
      actions.push("Ch∆°i v·ªõi b·∫°n", "H·ªçc b√†i");
    } else {
      actions.push("U·ªëng r∆∞·ª£u", "L√°i xe");
    }

    // Th√™m h√†nh ƒë·ªông d·ª±a tr√™n ngh·ªÅ nghi·ªáp
    if (person.occupation) {
      actions.push(`Th·ª±c hi·ªán c√¥ng vi·ªác ${person.occupation}`);
    }

    // Th√™m h√†nh ƒë·ªông d·ª±a tr√™n v·ªã tr√≠
    if (person.location.type === "commercial") {
      actions.push("Mua s·∫Øm", "B√°n h√†ng");
    } else if (person.location.type === "public") {
      actions.push("Tham gia ho·∫°t ƒë·ªông c·ªông ƒë·ªìng");
    }

    return actions;
  }

  private getNearbyPeople(person: Person): Person[] {
    return this.state.people.filter(
      (p) =>
        p.id !== person.id &&
        p.location.x === person.location.x &&
        p.location.y === person.location.y
    );
  }

  private applyActionEffects(actionResult: ActionResult): void {
    for (const effect of actionResult.effects) {
      const person = this.state.people.find((p) => p.id === effect.target);
      if (!person) continue;

      switch (effect.type) {
        case "health":
          person.health = Math.max(
            0,
            Math.min(100, person.health + effect.change)
          );
          break;
        case "happiness":
          person.happiness = Math.max(
            0,
            Math.min(100, person.happiness + effect.change)
          );
          break;
        case "energy":
          person.energy = Math.max(
            0,
            Math.min(100, person.energy + effect.change)
          );
          break;
        case "wealth":
          person.wealth = Math.max(0, person.wealth + effect.change);
          break;
        case "skill":
          // Effect.target ch·ª©a t√™n skill trong tr∆∞·ªùng h·ª£p n√†y
          const skillName = effect.target as keyof typeof person.skills;
          if (skillName in person.skills) {
            (person.skills as any)[skillName] = Math.max(
              0,
              Math.min(100, (person.skills as any)[skillName] + effect.change)
            );
          }
          break;
      }
    }

    // Th√™m memories n·∫øu c√≥
    if (actionResult.newMemories) {
      for (const memory of actionResult.newMemories) {
        const person = this.state.people.find(
          (p) => p.id === memory.participants[0]
        );
        if (person) {
          person.memories.push(memory);
          // Gi·ªØ ch·ªâ 20 memories g·∫ßn nh·∫•t
          if (person.memories.length > 20) {
            person.memories = person.memories.slice(-20);
          }
        }
      }
    }
  }

  private async generateSocialEvent(): Promise<void> {
    try {
      const eventDescription = await this.aiDecisionMaker.generateSocialEvent(
        this.state
      );

      const socialEvent: SocialEvent = {
        id: `event_${Date.now()}`,
        type: "random",
        description: eventDescription,
        participants: this.state.people
          .slice(0, Math.floor(Math.random() * 5) + 1)
          .map((p) => p.id),
        location:
          this.state.locations[
            Math.floor(Math.random() * this.state.locations.length)
          ],
        timestamp: new Date(),
        impact: [], // C√≥ th·ªÉ th√™m effects cho events
      };

      this.state.events.push(socialEvent);
      console.log(`üì∞ S·ª± ki·ªán x√£ h·ªôi: ${eventDescription}`);

      // Gi·ªØ ch·ªâ 50 events g·∫ßn nh·∫•t
      if (this.state.events.length > 50) {
        this.state.events = this.state.events.slice(-50);
      }
    } catch (error) {
      console.error("L·ªói khi t·∫°o s·ª± ki·ªán x√£ h·ªôi:", error);
    }
  }

  private advanceTime(): void {
    this.state.time.hour += 1;

    if (this.state.time.hour >= 24) {
      this.state.time.hour = 0;
      this.state.time.day += 1;

      // Thay ƒë·ªïi m√πa m·ªói 90 ng√†y
      if (this.state.time.day % 90 === 0) {
        const seasons = ["spring", "summer", "autumn", "winter"] as const;
        const currentIndex = seasons.indexOf(this.state.time.season);
        this.state.time.season = seasons[(currentIndex + 1) % 4];
      }
    }

    // Regenerate energy m·ªói s√°ng
    if (this.state.time.hour === 6) {
      for (const person of this.state.people) {
        person.energy = Math.min(100, person.energy + 30);
      }
    }
  }

  private updateEconomy(): void {
    this.state.economy.averageWealth = this.calculateAverageWealth(
      this.state.people
    );
    this.state.economy.unemployment = this.calculateUnemployment(
      this.state.people
    );

    // Random inflation changes
    if (Math.random() < 0.1) {
      this.state.economy.inflation += (Math.random() - 0.5) * 0.5;
      this.state.economy.inflation = Math.max(
        0,
        Math.min(20, this.state.economy.inflation)
      );
    }
  }

  private calculateAverageWealth(people: Person[]): number {
    const totalWealth = people.reduce((sum, person) => sum + person.wealth, 0);
    return Math.round(totalWealth / people.length);
  }

  private calculateUnemployment(people: Person[]): number {
    const workingAge = people.filter((p) => p.age >= 18 && p.age <= 65);
    const unemployed = workingAge.filter((p) => !p.occupation);
    return Math.round((unemployed.length / workingAge.length) * 100);
  }

  private printSocietyStats(): void {
    console.log("\nüìä TH·ªêNG K√ä X√É H·ªòI:");
    console.log(`üë• D√¢n s·ªë: ${this.state.people.length}`);
    console.log(`üí∞ T√†i s·∫£n TB: ${this.state.economy.averageWealth}`);
    console.log(`üìà Th·∫•t nghi·ªáp: ${this.state.economy.unemployment}%`);
    console.log(`üìä L·∫°m ph√°t: ${this.state.economy.inflation.toFixed(1)}%`);

    // Th·ªëng k√™ s·ª©c kh·ªèe v√† h·∫°nh ph√∫c
    const avgHealth = Math.round(
      this.state.people.reduce((sum, p) => sum + p.health, 0) /
        this.state.people.length
    );
    const avgHappiness = Math.round(
      this.state.people.reduce((sum, p) => sum + p.happiness, 0) /
        this.state.people.length
    );

    console.log(`‚ù§Ô∏è S·ª©c kh·ªèe TB: ${avgHealth}/100`);
    console.log(`üòä H·∫°nh ph√∫c TB: ${avgHappiness}/100`);
  }

  getSocietyState(): SocietyState {
    return this.state;
  }

  getPerson(id: string): Person | undefined {
    return this.state.people.find((p) => p.id === id);
  }

  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
