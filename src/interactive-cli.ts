import { SocietySimulator } from "./society-simulator.js";
import { SocietyAnalyzer } from "./society-analyzer.js";

export class InteractiveCLI {
  private simulator: SocietySimulator;
  private analyzer: SocietyAnalyzer;
  private isRunning: boolean = false;

  constructor() {
    this.simulator = new SocietySimulator();
    this.analyzer = new SocietyAnalyzer();
  }

  async start(): Promise<void> {
    console.log("üåü H·ªÜ TH·ªêNG GI·∫¢ L·∫¨P X√É H·ªòI T∆Ø∆†NG T√ÅC üåü");
    console.log("=====================================");
    this.showMenu();

    process.stdin.setRawMode(true);
    process.stdin.resume();
    process.stdin.setEncoding("utf8");

    process.stdin.on("data", (key) => {
      this.handleInput(key.toString());
    });
  }

  private showMenu(): void {
    console.log("\nüìã MENU ƒêI·ªÄU KHI·ªÇN:");
    console.log("  [1] B·∫Øt ƒë·∫ßu simulation");
    console.log("  [2] D·ª´ng simulation");
    console.log("  [3] Xem th·ªëng k√™ chi ti·∫øt");
    console.log("  [4] Xem th√¥ng tin ng∆∞·ªùi d√¢n");
    console.log("  [5] Xem danh s√°ch ƒë·ªãa ƒëi·ªÉm");
    console.log("  [6] Xem s·ª± ki·ªán g·∫ßn ƒë√¢y");
    console.log("  [7] T·∫°o b√°o c√°o ph√¢n t√≠ch");
    console.log("  [8] Th√™m ng∆∞·ªùi d√¢n m·ªõi");
    console.log("  [h] Hi·ªÉn th·ªã menu n√†y");
    console.log("  [q] Tho√°t");
    console.log("\nNh·∫•n ph√≠m ƒë·ªÉ ch·ªçn...");
  }

  private async handleInput(key: string): Promise<void> {
    switch (key.toLowerCase()) {
      case "1":
        await this.startSimulation();
        break;
      case "2":
        this.stopSimulation();
        break;
      case "3":
        this.showDetailedStats();
        break;
      case "4":
        this.showPeopleInfo();
        break;
      case "5":
        this.showLocations();
        break;
      case "6":
        this.showRecentEvents();
        break;
      case "7":
        this.generateAnalysisReport();
        break;
      case "8":
        this.addNewPerson();
        break;
      case "h":
        this.showMenu();
        break;
      case "q":
      case "\u0003": // Ctrl+C
        this.exit();
        break;
      default:
        console.log(`Ph√≠m kh√¥ng h·ª£p l·ªá: ${key}. Nh·∫•n 'h' ƒë·ªÉ xem menu.`);
    }
  }

  private async startSimulation(): Promise<void> {
    if (this.isRunning) {
      console.log("‚ö†Ô∏è Simulation ƒëang ch·∫°y r·ªìi!");
      return;
    }

    console.log("üöÄ B·∫Øt ƒë·∫ßu simulation...");
    this.isRunning = true;

    // Ch·∫°y simulation trong background
    this.runSimulationLoop();
  }

  private stopSimulation(): void {
    if (!this.isRunning) {
      console.log("‚ö†Ô∏è Simulation ch∆∞a ch·∫°y!");
      return;
    }

    console.log("‚èπÔ∏è D·ª´ng simulation...");
    this.isRunning = false;
    this.simulator.stopSimulation();
  }

  private async runSimulationLoop(): Promise<void> {
    let stepCount = 0;
    while (this.isRunning) {
      try {
        // Th·ª±c hi·ªán m·ªôt b∆∞·ªõc simulation
        await this.simulateOneStep();
        stepCount++;

        // Hi·ªÉn th·ªã th·ªëng k√™ m·ªói 5 b∆∞·ªõc
        if (stepCount % 5 === 0) {
          this.showQuickStats();
        }

        // Delay 3 gi√¢y
        await this.sleep(3000);
      } catch (error) {
        console.error("‚ùå L·ªói trong simulation:", error);
        this.isRunning = false;
      }
    }
  }

  private async simulateOneStep(): Promise<void> {
    // Simplified simulation step - kh√¥ng c·∫ßn Ollama
    const state = this.simulator.getSocietyState();

    console.log(`\n‚è∞ Ng√†y ${state.time.day}, gi·ªù ${state.time.hour}:00`);

    // M·ªói ng∆∞·ªùi th·ª±c hi·ªán m·ªôt h√†nh ƒë·ªông ng·∫´u nhi√™n
    const actions = [
      "L√†m vi·ªác",
      "Ngh·ªâ ng∆°i",
      "ƒÇn u·ªëng",
      "Giao ti·∫øp",
      "H·ªçc t·∫≠p",
      "T·∫≠p th·ªÉ d·ª•c",
      "Mua s·∫Øm",
      "Ch∆°i game",
      "ƒê·ªçc s√°ch",
    ];

    state.people.forEach((person) => {
      const action = actions[Math.floor(Math.random() * actions.length)];
      console.log(`üë§ ${person.name}: ${action}`);

      // Apply random effects
      person.energy = Math.max(
        0,
        Math.min(100, person.energy + (Math.random() - 0.5) * 10)
      );
      person.happiness = Math.max(
        0,
        Math.min(100, person.happiness + (Math.random() - 0.5) * 5)
      );
    });

    // Advance time
    state.time.hour += 1;
    if (state.time.hour >= 24) {
      state.time.hour = 0;
      state.time.day += 1;
    }
  }

  private showDetailedStats(): void {
    const state = this.simulator.getSocietyState();

    console.log("\nüìä TH·ªêNG K√ä CHI TI·∫æT:");
    console.log(
      `‚è∞ Th·ªùi gian: Ng√†y ${state.time.day}, gi·ªù ${state.time.hour}, m√πa ${state.time.season}`
    );
    console.log(`üë• D√¢n s·ªë: ${state.people.length}`);
    console.log(`üí∞ T√†i s·∫£n TB: ${state.economy.averageWealth}`);
    console.log(`üìà Th·∫•t nghi·ªáp: ${state.economy.unemployment}%`);
    console.log(`üìä L·∫°m ph√°t: ${state.economy.inflation}%`);

    const avgHealth = Math.round(
      state.people.reduce((sum, p) => sum + p.health, 0) / state.people.length
    );
    const avgHappiness = Math.round(
      state.people.reduce((sum, p) => sum + p.happiness, 0) /
        state.people.length
    );
    const avgEnergy = Math.round(
      state.people.reduce((sum, p) => sum + p.energy, 0) / state.people.length
    );

    console.log(`‚ù§Ô∏è S·ª©c kh·ªèe TB: ${avgHealth}/100`);
    console.log(`üòä H·∫°nh ph√∫c TB: ${avgHappiness}/100`);
    console.log(`‚ö° NƒÉng l∆∞·ª£ng TB: ${avgEnergy}/100`);
  }

  private showQuickStats(): void {
    const state = this.simulator.getSocietyState();
    const avgHappiness = Math.round(
      state.people.reduce((sum, p) => sum + p.happiness, 0) /
        state.people.length
    );
    const avgEnergy = Math.round(
      state.people.reduce((sum, p) => sum + p.energy, 0) / state.people.length
    );

    console.log(
      `üìä H·∫°nh ph√∫c: ${avgHappiness}/100 | NƒÉng l∆∞·ª£ng: ${avgEnergy}/100`
    );
  }

  private showPeopleInfo(): void {
    const state = this.simulator.getSocietyState();

    console.log("\nüë• TH√îNG TIN NG∆Ø·ªúI D√ÇN:");
    state.people.forEach((person, index) => {
      console.log(`${index + 1}. ${person.name} (${person.age} tu·ªïi)`);
      console.log(`   Ngh·ªÅ: ${person.occupation || "Kh√¥ng c√≥"}`);
      console.log(`   V·ªã tr√≠: ${person.location.name}`);
      console.log(
        `   üí∞${person.wealth} ‚ù§Ô∏è${person.health} üòä${person.happiness} ‚ö°${person.energy}`
      );
      console.log(`   M·ªëi quan h·ªá: ${person.relationships.length}`);
    });
  }

  private showLocations(): void {
    const state = this.simulator.getSocietyState();

    console.log("\nüèòÔ∏è DANH S√ÅCH ƒê·ªäA ƒêI·ªÇM:");
    state.locations.forEach((location) => {
      const peopleHere = state.people.filter(
        (p) => p.location.name === location.name
      );
      console.log(`üìç ${location.name} (${location.type})`);
      console.log(`   T·ªça ƒë·ªô: (${location.x}, ${location.y})`);
      console.log(`   Ng∆∞·ªùi hi·ªán t·∫°i: ${peopleHere.length}`);
      if (peopleHere.length > 0) {
        console.log(`   ${peopleHere.map((p) => p.name).join(", ")}`);
      }
    });
  }

  private showRecentEvents(): void {
    const state = this.simulator.getSocietyState();

    console.log("\nüì∞ S·ª∞ KI·ªÜN G√ÄN ƒê√ÇY:");
    const recentEvents = state.events.slice(-10);

    if (recentEvents.length === 0) {
      console.log("   Ch∆∞a c√≥ s·ª± ki·ªán n√†o.");
      return;
    }

    recentEvents.forEach((event, index) => {
      console.log(`${index + 1}. ${event.description}`);
      console.log(`   Th·ªùi gian: ${event.timestamp.toLocaleString()}`);
      console.log(`   ƒê·ªãa ƒëi·ªÉm: ${event.location.name}`);
      console.log(`   Tham gia: ${event.participants.length} ng∆∞·ªùi`);
    });
  }

  private generateAnalysisReport(): void {
    const state = this.simulator.getSocietyState();
    const report = this.analyzer.generateFullReport(state);

    console.log(report);
  }

  private addNewPerson(): void {
    console.log("\n‚ûï TH√äM NG∆Ø·ªúI D√ÇN M·ªöI");
    console.log("T√≠nh nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong phi√™n b·∫£n ti·∫øp theo.");
    // TODO: Implement person creation interface
  }

  private exit(): void {
    console.log("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng gi·∫£ l·∫≠p x√£ h·ªôi!");
    this.isRunning = false;
    process.exit(0);
  }

  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}
